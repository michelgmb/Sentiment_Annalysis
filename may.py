# -*- coding: utf-8 -*-
import re
"""bookannalysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LuRz7sgw4BehgyEAumQ1UHLXrEQBwrMH

# **Load the Book**
"""

with open('miracle_in_the_andes.txt',"r") as f:
  text_book = f.read()

type(text_book)

"""# **How Many Chapter**

***using the string method***
"""

text_book.count("Chapter")
# It has limitation of getting a pattern. We use regex

"""# ***Using regex for Chapter Count and pattern***"""


pattern = re.compile("Chapter [0-9]")# This will give one digit
number_chapter = re.findall(pattern, text_book)

number_chapter # this does not print more digit

len(number_chapter)

pattern = re.compile("Chapter [0-9]+")# This will give more digit digit
number_chapter = re.findall(pattern, text_book)

number_chapter

len(number_chapter)

"""# **Which are the sentences where love was used**"""

#pattern = re.compile("[a-zA-Z ,:]* love [a-zA-Z]*") #Not vialable
pattern = re.compile("[A-Z]{1}[^.]*[^a-zA-Z]+love[a-zA-Z]+[^.]*.") #Give me everything except .
sentence_love = re.findall(pattern , text_book)

sentence_love

"""#**What are the most used word**"""

# text_book.split() # Not optimal bc Oct. is dif from Oct

text_book
pattern = re.compile("[a-zA-Z]+") #Give me everything except .
word_count = re.findall(pattern , text_book.lower())

dict_word = {}
for word in word_count:
  if word in dict_word.keys():
    dict_word[word] = dict_word[word]+1
  else:
    dict_word[word]= 1

dict_word

#List of Tupple
dict_word_to_list = [ (value, key) for (key, value) in dict_word.items() ] # write Value, Key insted of k, V because we need to sort by Values
dict_word_to_list

sorted(dict_word_to_list, reverse=True)